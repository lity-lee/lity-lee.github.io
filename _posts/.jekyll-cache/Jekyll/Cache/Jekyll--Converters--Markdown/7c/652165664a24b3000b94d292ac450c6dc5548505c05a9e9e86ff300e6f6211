I"?<p>从大学开始学习java面向对象编程，一直对其它实现不了解，所以很多概念学了忘、忘了学。随着时间的积累， 及对c++的深入学习，才慢慢了解面向对象重要的是思想，是为了复用代码，其它的概念都像是“延伸”出来的。解惑后记录一下当时学习的“天真”想法。</p>

<!-- more -->

<h3 id="面向对象的三个小问题">面向对象的三个小问题</h3>

<ol>
  <li>
    <p>继承于抽象类的非抽象类必须实现抽象类中定义的抽象方法吗？</p>
  </li>
  <li>
    <p>父类里的私有属性，在子类对象里存不存在？对象对应于内存中的一片空间，那么子类对象的内存空间中有没有保存父类中声明的私有属性的值？</p>
  </li>
  <li>
    <p>父类中声明了一个保护方法a()和一个私有方法b(),a()方法会调用b()方法；子类有一公用方法c(),c()方法会调用a()方法，若创建
一个子类对象,调用其c()方法会不会报错？</p>
  </li>
</ol>

<p>问题1答案：如下，自己得结论吧，我较赞同不一定。
在包com.lity.java.apis.abstracttest中定义一个类，如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class Animal {
	 abstract void run();
	 public void crazyRun() {
		  run();
	 }
}
</code></pre></div></div>
<p>run()方法声明成包内的，并把此包打包成jar文件。打包的jar构建到项目中去，并写一个Dog类继承于Animal类：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Dog extends Animal {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.crazyRun();
    }
}
</code></pre></div></div>

<p>这时eclipse并不提示你去实现run()方法，但当你运行此程序时会抛出错误，原因是找不到run()方法，就添加一个run()方法。
根据我们一般的思路这似乎就是重写，而你在run()方法上面加上“@Override”，就会出现编译错误；若把run()方法的访问权限改为private也可以正常运行。</p>

<p>问题2答案：存在。不继承并不是没有。</p>

<p>问题3答案：如下，此程序符合面向对象语法、没有编译错误、没有运行错误。父类私有的方法，子类无法直接访问，但可间接执行。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">com</span><span class="p">.</span><span class="n">lity</span><span class="p">.</span><span class="n">java</span><span class="p">.</span><span class="n">apis</span><span class="p">.</span><span class="n">pri</span><span class="p">;</span>
<span class="n">class</span> <span class="n">Animal</span> <span class="n">extends</span> <span class="n">Object</span> <span class="p">{</span>
	<span class="n">private</span> <span class="n">void</span> <span class="n">internal</span><span class="p">()</span> <span class="p">{</span>
	<span class="nf">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s2">"run away"</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">protected</span> <span class="n">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">internal</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="n">class</span> <span class="n">Dog</span> <span class="n">extends</span> <span class="n">Animal</span> <span class="p">{</span>
	<span class="k">public</span> <span class="n">void</span> <span class="n">crazyRun</span><span class="p">()</span> <span class="p">{</span>
		<span class="nf">run</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="n">class</span> <span class="n">Method</span> <span class="p">{</span>
	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">main</span><span class="p">(</span><span class="k">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Dog</span> <span class="n">dog</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Dog</span><span class="p">();</span>
		<span class="n">dog</span><span class="p">.</span><span class="n">crazyRun</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET